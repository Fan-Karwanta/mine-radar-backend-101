import mongoose from 'mongoose';

// Unified Report Schema that handles all 6 report types
const ReportSchema = new mongoose.Schema({
  // Common fields for all reports
  reportId: {
    type: String,
    unique: true,
    required: false  // Will be generated by pre-save hook
  },
  reportType: {
    type: String,
    enum: ['illegal_mining', 'illegal_transport', 'illegal_processing', 'illegal_trading', 'illegal_exploration', 'illegal_smallscale'],
    required: true
  },
  language: {
    type: String,
    enum: ['english', 'filipino'],
    required: true
  },
  submittedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  submittedAt: {
    type: Date,
    default: Date.now
  },
  status: {
    type: String,
    enum: ['pending', 'under_investigation', 'resolved', 'dismissed'],
    default: 'pending'
  },

  // Location and GPS data (common to all)
  gpsLocation: {
    latitude: {
      type: Number,
      required: true
    },
    longitude: {
      type: Number,
      required: true
    }
  },
  location: {
    type: String,
    required: true
  },
  
  // Date and time (common to all)
  incidentDate: {
    type: String,
    required: true
  },
  incidentTime: {
    type: String,
    required: true
  },

  // Project information (for mining, processing, exploration, small-scale)
  projectInfo: {
    hasSignboard: {
      type: String,
      enum: ['yes', 'no', 'not_determined'],
      default: 'not_determined'
    },
    projectName: {
      type: String,
      default: ''
    }
  },

  // Commodity information (for mining, transport, trading, small-scale)
  commodity: {
    type: String,
    default: ''
  },

  // Site status (for mining, processing, small-scale)
  siteStatus: {
    type: String,
    enum: ['operating', 'non_operating', 'under_construction'],
    default: 'operating'
  },

  // ILLEGAL MINING SPECIFIC FIELDS
  miningData: {
    operatingActivities: {
      extraction: {
        active: { type: Boolean, default: false },
        equipment: [String]
      },
      disposition: {
        active: { type: Boolean, default: false },
        equipment: [String]
      },
      processing: {
        active: { type: Boolean, default: false },
        equipment: [String]
      }
    },
    nonOperatingObservations: {
      excavations: { type: Boolean, default: false },
      accessRoad: { type: Boolean, default: false },
      processingFacility: { type: Boolean, default: false }
    },
    interview: {
      conducted: { type: Boolean, default: false },
      responses: {
        recentActivity: String,
        excavationStart: String,
        transportVehicles: String,
        operatorName: String,
        operatorAddress: String,
        permits: String
      }
    }
  },

  // ILLEGAL TRANSPORTATION SPECIFIC FIELDS
  transportData: {
    violationType: {
      type: String,
      enum: ['absence', 'outdated', 'fraudulent']
    },
    documentType: String,
    materialInfo: {
      volumeWeight: String,
      unit: String
    },
    vehicleInfo: {
      type: { type: String },  // Nested 'type' field (not Mongoose type definition)
      description: String,
      bodyColor: String,
      plateNumber: String
    },
    ownerOperator: {
      name: String,
      address: String
    },
    driver: {
      name: String,
      address: String
    },
    sourceOfMaterials: String,
    actionsTaken: String
  },

  // ILLEGAL PROCESSING SPECIFIC FIELDS
  processingData: {
    facilityInfo: {
      type: { type: String },  // Nested 'type' field (not Mongoose type definition)
      processingProducts: String
    },
    rawMaterials: {
      sourceName: String,
      sourceLocation: String,
      determinationMethod: String
    }
  },

  // ILLEGAL TRADING SPECIFIC FIELDS
  tradingData: {
    violationType: {
      type: String,
      default: 'trading_without_permit'
    },
    businessInfo: {
      name: String,
      owner: String,
      location: String
    },
    commoditySource: {
      name: String,
      location: String,
      determinationMethod: String
    },
    stockpiledMaterials: {
      type: String,
      enum: ['yes', 'no', 'none', 'not_determined']
    },
    dtiRegistration: {
      type: String,
      enum: ['yes', 'no', 'not_determined']
    }
  },

  // ILLEGAL EXPLORATION SPECIFIC FIELDS
  explorationData: {
    activities: {
      drilling: { type: Boolean, default: false },
      testPitting: { type: Boolean, default: false },
      trenching: { type: Boolean, default: false },
      shaftSinking: { type: Boolean, default: false },
      tunneling: { type: Boolean, default: false },
      others: { type: Boolean, default: false }
    },
    othersActivity: String
  },

  // ILLEGAL SMALL-SCALE MINING SPECIFIC FIELDS
  smallScaleData: {
    operatingActivities: {
      extraction: { type: Boolean, default: false },
      disposition: { type: Boolean, default: false },
      mineralProcessing: { type: Boolean, default: false },
      tunneling: { type: Boolean, default: false },
      shaftSinking: { type: Boolean, default: false },
      goldPanning: { type: Boolean, default: false },
      amalgamation: { type: Boolean, default: false },
      others: { type: Boolean, default: false }
    },
    equipmentUsed: {
      extraction: String,
      disposition: String,
      mineralProcessing: String
    },
    othersActivity: String,
    nonOperatingObservations: {
      excavations: { type: Boolean, default: false },
      stockpiles: { type: Boolean, default: false },
      tunnels: { type: Boolean, default: false },
      mineShafts: { type: Boolean, default: false },
      accessRoad: { type: Boolean, default: false },
      processingFacility: { type: Boolean, default: false }
    },
    interview: {
      conducted: { type: Boolean, default: false },
      responses: {
        question1: String,
        question2: String,
        question3: String,
        question4: String,
        question5: String,
        question6: String
      }
    }
  },

  // Operator information (common to most reports)
  operatorInfo: {
    name: String,
    address: String,
    determinationMethod: String
  },

  // Additional information (common to all)
  additionalInfo: {
    type: String,
    default: ''
  },

  // Photos/attachments (common to all)
  attachments: [{
    filename: String,
    path: String,
    uploadedAt: { type: Date, default: Date.now },
    geotagged: { type: Boolean, default: false }
  }],

  // Certification (common to all)
  certified: {
    type: Boolean,
    default: true
  },
  certificationDate: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
});

// Generate unique report ID with unified MR- prefix (MineRadar)
ReportSchema.pre('save', async function(next) {
  if (!this.reportId) {
    // Count all reports regardless of type for unified numbering
    const count = await this.constructor.countDocuments();
    const prefix = 'MR'; // Unified prefix for all MineRadar reports
    this.reportId = `${prefix}-${String(count + 1).padStart(6, '0')}`;
  }
  next();
});

// Index for better query performance
ReportSchema.index({ reportType: 1, submittedAt: -1 });
ReportSchema.index({ status: 1 });
ReportSchema.index({ submittedBy: 1 });
ReportSchema.index({ language: 1 });

export default mongoose.model('Report', ReportSchema);
